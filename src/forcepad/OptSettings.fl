# data file for the Fltk User Interface Designer (fluid)
version 1.0400
header_name {.h}
code_name {.cpp}
decl {\#include "FlPaintView.h"} {private global
}

class COptSettings {open
} {
  decl {void* m_paintView;} {private local
  }
  Function {COptSettings()} {open
  } {
    Fl_Window mainWindow {
      label {Optimisation Settings} open
      xywh {639 233 312 290} type Double color 0 labelcolor 7 modal visible
    } {
      Fl_Button cancelButton {
        label Cancel
        callback {mainWindow->hide();}
        xywh {230 255 70 25} box FLAT_BOX color 8 labelsize 11 labelcolor 7
      }
      Fl_Button okButton {
        label OK
        callback {this->getData();
mainWindow->hide();}
        xywh {154 255 70 25} box FLAT_BOX color 8 labelsize 11 labelcolor 7
      }
      Fl_Value_Slider volFrac {
        label {Volume fraction}
        xywh {14 25 286 20} type Horizontal box FLAT_BOX color 8 labelsize 11 labelcolor 7 align 5 value 0.5 textsize 11 textcolor 7
      }
      Fl_Value_Slider rmin {
        label {Filter r,min (pixels)} selected
        xywh {14 65 286 20} type Horizontal box FLAT_BOX color 8 labelsize 11 labelcolor 7 align 5 minimum 1 maximum 100 step 1 value 20 textsize 11 textcolor 7
      }
      Fl_Value_Slider minChange {
        label {Min change stop criteria}
        xywh {15 105 286 20} type Horizontal box FLAT_BOX color 8 labelsize 11 labelcolor 7 align 5 minimum 0.01 maximum 0.1 value 0.01 textsize 11 textcolor 7
      }
      Fl_Value_Slider maxLoops {
        label {Max loops stop criteria}
        xywh {15 147 286 20} type Horizontal box FLAT_BOX color 8 labelsize 11 labelcolor 7 align 5 minimum 1 maximum 1000 step 1 value 50 textsize 11 textcolor 7
      }
      Fl_Group {} {
        label {Sensitivity filter} open
        xywh {15 187 285 56} box FLAT_BOX color 8 labelsize 11 labelcolor 7 align 5
      } {
        Fl_Round_Button noFilter {
          label {No filter}
          xywh {22 193 64 15} type Radio down_box ROUND_DOWN_BOX labelsize 11 labelcolor 7
        }
        Fl_Round_Button sigmundFilter {
          label {Ole Sigmund}
          xywh {22 208 88 15} type Radio down_box ROUND_DOWN_BOX labelsize 11 labelcolor 7
        }
        Fl_Round_Button backPedersenFilter {
          label {Sharp Contouring Filter}
          xywh {22 223 93 15} type Radio down_box ROUND_DOWN_BOX labelsize 11 labelcolor 7
        }
      }
    }
    code {m_paintView = NULL;} {}
  }
  Function {~COptSettings()} {open
  } {
    code {mainWindow->hide();} {}
  }
  Function {show()} {open
  } {
    code {this->setData();
mainWindow->show();
while (mainWindow->visible()) Fl::wait();} {}
  }
  Function {setView(void* view)} {open
  } {
    code {m_paintView = (CFlPaintView*)view;} {}
  }
  Function {setData()} {open
  } {
    code {if (m_paintView!=NULL)
{
	CFlPaintView* view = (CFlPaintView*)m_paintView;
	
	volFrac->value(view->getOptVolumeFraction());
	rmin->value(view->getOptRmin());
	minChange->value(view->getOptMinChange());
	maxLoops->value(view->getOptMaxLoops());
	
	if (view->getOptFilterType()==CFemGridSolver2::FT_NO_FILTER)
		noFilter->value(1);
	if (view->getOptFilterType()==CFemGridSolver2::FT_OLE_SIGMUND)
		sigmundFilter->value(1);
	if (view->getOptFilterType()==CFemGridSolver2::FT_SHARP_CONTOURING)
		backPedersenFilter->value(1);

}} {}
  }
  Function {getData()} {open
  } {
    code {if (m_paintView!=NULL)
{
	CFlPaintView* view = (CFlPaintView*)m_paintView;
	
	view->setOptVolumeFraction(volFrac->value());
	view->setOptRmin(rmin->value());
	view->setOptMinChange(minChange->value());
	view->setOptMaxLoops(maxLoops->value());
	
	if (noFilter->value()==1)
		view->setOptFilterType(CFemGridSolver2::FT_NO_FILTER);
	if (sigmundFilter->value()==1)
		view->setOptFilterType(CFemGridSolver2::FT_OLE_SIGMUND);
	if (backPedersenFilter->value()==1)
		view->setOptFilterType(CFemGridSolver2::FT_SHARP_CONTOURING);
	
}} {}
  }
  Function {centerWindow(Fl_Window* window)} {open
  } {
    code {mainWindow->position(window->x()+window->w()/2-mainWindow->w()/2, window->y()+window->h()/2-mainWindow->h()/2);} {}
  }
  Function {hide()} {open
  } {
    code {mainWindow->hide();} {}
  }
}
