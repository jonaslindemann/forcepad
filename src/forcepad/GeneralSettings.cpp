// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "GeneralSettings.h"
#include "PaintView.h"
#include "PlatformInfo.h"

void CGeneralSettings::cb_okButton_i(Fl_Button*, void*) {
  this->getData();
mainWindow->hide();
}
void CGeneralSettings::cb_okButton(Fl_Button* o, void* v) {
  ((CGeneralSettings*)(o->parent()->user_data()))->cb_okButton_i(o,v);
}

void CGeneralSettings::cb_lineThickness_i(Fl_Value_Slider*, void*) {
  CPaintView* view = (CPaintView*)m_paintView;
view->setUiLineThickness(lineThickness->value());
}
void CGeneralSettings::cb_lineThickness(Fl_Value_Slider* o, void* v) {
  ((CGeneralSettings*)(o->parent()->user_data()))->cb_lineThickness_i(o,v);
}

void CGeneralSettings::cb_symbolLength_i(Fl_Value_Slider*, void*) {
  CPaintView* view = (CPaintView*)m_paintView;
view->setUiSymbolLength(symbolLength->value());
}
void CGeneralSettings::cb_symbolLength(Fl_Value_Slider* o, void* v) {
  ((CGeneralSettings*)(o->parent()->user_data()))->cb_symbolLength_i(o,v);
}

CGeneralSettings::CGeneralSettings() {
  { mainWindow = new Fl_Double_Window(311, 170, "General Settings");
    mainWindow->user_data((void*)(this));
    { okButton = new Fl_Button(230, 135, 70, 25, "Close");
      okButton->labelsize(11);
      okButton->callback((Fl_Callback*)cb_okButton);
    } // Fl_Button* okButton
    { lineThickness = new Fl_Value_Slider(14, 25, 286, 20, "Line thickness (pixels)");
      lineThickness->type(5);
      lineThickness->labelsize(11);
      lineThickness->minimum(1);
      lineThickness->maximum(20);
      lineThickness->step(1);
      lineThickness->value(2);
      lineThickness->textsize(11);
      lineThickness->callback((Fl_Callback*)cb_lineThickness);
      lineThickness->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Value_Slider* lineThickness
    { symbolLength = new Fl_Value_Slider(14, 65, 286, 20, "Symbol length (pixels)");
      symbolLength->type(5);
      symbolLength->labelsize(11);
      symbolLength->minimum(10);
      symbolLength->maximum(300);
      symbolLength->step(5);
      symbolLength->value(50);
      symbolLength->textsize(11);
      symbolLength->callback((Fl_Callback*)cb_symbolLength);
      symbolLength->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Value_Slider* symbolLength
    { showTabletPCToolbar = new Fl_Check_Button(13, 95, 285, 25, "Show Tablet PC toolbar (even if not a Tablet PC)");
      showTabletPCToolbar->down_box(FL_DOWN_BOX);
      showTabletPCToolbar->labelsize(11);
    } // Fl_Check_Button* showTabletPCToolbar
    mainWindow->set_modal();
    mainWindow->end();
  } // Fl_Double_Window* mainWindow
  m_paintView = NULL;
}

void CGeneralSettings::show() {
  this->setData();
mainWindow->show();
while (mainWindow->visible()) Fl::wait();
}

void CGeneralSettings::setView(void* view) {
  m_paintView = (CPaintView*)view;
}

void CGeneralSettings::setData() {
  if (m_paintView!=NULL)
{
	CPaintView* view = (CPaintView*)m_paintView;
	
	lineThickness->value(view->getUiLineThickness());
	symbolLength->value(view->getUiSymbolLength());
}

if (CPlatformInfo::getInstance()->getFakeTabletPC())
	showTabletPCToolbar->set();
else
	showTabletPCToolbar->clear();
}

void CGeneralSettings::getData() {
  if (m_paintView!=NULL)
{
	CPaintView* view = (CPaintView*)m_paintView;	
}

if (showTabletPCToolbar->value()==1)
	CPlatformInfo::getInstance()->setFakeTabletPC(true);
else
	CPlatformInfo::getInstance()->setFakeTabletPC(false);
}

void CGeneralSettings::centerWindow(Fl_Window* window) {
  mainWindow->position(window->x()+window->w()/2-mainWindow->w()/2, window->y()+window->h()/2-mainWindow->h()/2);
}
