# data file for the Fltk User Interface Designer (fluid)
version 1.0300 
header_name {.h} 
code_name {.cpp}
decl {\#include "PaintView.h"} {global
} 

decl {\#include "CalcSettings.h"} {global
} 

decl {\#include "PlatformInfo.h"} {global
} 

decl {\#ifdef WIN32} {} 

decl {\#include "resource.h"} {} 

decl {\#include "dwmapi.h"} {} 

decl {\#endif} {} 

decl {\#include <FL/x.H>} {} 

class CVizMixerToolbar {open
} {
  decl {void* m_paintView;} {}
  Function {CVizMixerToolbar()} {open
  } {
    Fl_Window mainWindow {
      label {Viz Mixer} open
      xywh {342 160 273 200} type Double color 0 non_modal visible
    } {
      Fl_Button btnStress {
        tooltip {Stress visualisation} image {../../images/stress2_black.xpm} xywh {11 147 42 42} type Radio box THIN_UP_BOX down_box THIN_DOWN_FRAME value 1 color 0 selection_color 1
        code0 {\#include "Fl_HoverButton.h"}
        class Fl_HoverButton
      }
      Fl_Button btnDisplacements {
        tooltip {Displacement visualisation} image {../../images/displacements_black.xpm} xywh {104 147 42 42} type Radio box THIN_UP_BOX down_box THIN_DOWN_FRAME color 0 selection_color 1
        code0 {\#include "Fl_HoverButton.h"}
        class Fl_HoverButton
      }
      Fl_Button btnMisesStress {
        tooltip {Mises stress visualisation} image {../../images/stress_mises_black.xpm} xywh {57 147 42 42} type Radio box THIN_UP_BOX down_box THIN_DOWN_FRAME color 0 selection_color 1
        code0 {\#include "Fl_HoverButton.h"}
        class Fl_HoverButton
      }
      Fl_Group {} {open
        xywh {1 1 272 135} color 7
      } {
        Fl_Button btnTensionCompression {
          callback {CPaintView* paintView = (CPaintView*)m_paintView;
paintView->setStressMode(CFemGrid2::SM_ALL);}
          tooltip {Show both compression and tension} image {../../images/tension_compression_black.xpm} xywh {11 84 42 42} type Radio box THIN_UP_BOX down_box THIN_DOWN_FRAME value 1 color 0 selection_color 1
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button btnTension {
          callback {CPaintView* paintView = (CPaintView*)m_paintView;
paintView->setStressMode(CFemGrid2::SM_POSITIVE);}
          tooltip {Show only tension} image {../../images/tension_black.xpm} xywh {57 84 42 42} type Radio box THIN_UP_BOX down_box THIN_DOWN_FRAME color 0 selection_color 1
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button btnCompression {
          callback {CPaintView* paintView = (CPaintView*)m_paintView;
paintView->setStressMode(CFemGrid2::SM_NEGATIVE);}
          tooltip {Show only compression} image {../../images/compression_black.xpm} xywh {103 84 42 42} type Radio box THIN_UP_BOX down_box THIN_DOWN_FRAME color 0 selection_color 1
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Roller rolArrowSize {
          label Size
          callback {CPaintView* paintView = (CPaintView*) m_paintView;
paintView->setStressSize(rolArrowSize->value());}
          tooltip {Size of stress arrows} xywh {11 19 23 57} box FLAT_BOX labelsize 10 labelcolor 7 align 1 maximum 200 step 1 value 50
        }
        Fl_Roller rolTransparency {
          label Transp
          callback {CPaintView* paintView = (CPaintView*) m_paintView;
paintView->setStressAlpha(rolTransparency->value());}
          tooltip {Transparency of stress arrows} xywh {50 19 23 57} box FLAT_BOX labelsize 10 labelcolor 7 align 1 step 0.01 value 0.49
        }
        Fl_Roller rolStep {
          label Step
          callback {CPaintView* paintView = (CPaintView*)m_paintView;
paintView->setStressStep(rolStep->value());}
          tooltip {Render stresses for every "Step" element.} xywh {89 19 23 57} box FLAT_BOX labelsize 10 labelcolor 7 align 1 minimum 1 maximum 20 step 1 value 1
        }
        Fl_Button btnLockScale {
          label {Auto scale}
          callback {CPaintView* paintView = (CPaintView*)m_paintView;
if (btnLockScale->value()>0)
	paintView->unlockScaleFactor();
else
	paintView->lockScaleFactor();}
          tooltip {Show both compression and tension} xywh {150 84 42 42} type Toggle box THIN_UP_BOX down_box THIN_DOWN_FRAME value 1 color 0 selection_color 1 labelsize 10 labelcolor 7 align 128
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Slider minStress {
          label Min
          callback {CPaintView* paintView = (CPaintView*)m_paintView;
paintView->setStressTreshold(minStress->value(),maxStress->value());}
          xywh {208 19 25 107} box BORDER_BOX color 8 labelsize 11 labelcolor 7 align 1 minimum 1 maximum 0
        }
        Fl_Slider maxStress {
          label Max
          callback {CPaintView* paintView = (CPaintView*)m_paintView;
paintView->setStressTreshold(minStress->value(),maxStress->value());}
          xywh {240 19 25 107} box BORDER_BOX color 8 labelsize 11 labelcolor 7 align 1 minimum 1 maximum 0 value 1
        }
        Fl_Roller maxIntensity {
          label {Int.}
          callback {CPaintView* paintView = (CPaintView*)m_paintView;
paintView->setMaxIntensity(maxIntensity->value());}
          tooltip {Render stresses for every "Step" element.} xywh {129 19 23 57} box FLAT_BOX labelsize 10 labelcolor 7 align 1 step 0.01 value 0.5
        }
        Fl_Roller stressWidth {
          label Width
          callback {CPaintView* paintView = (CPaintView*)m_paintView;
paintView->setStressWidth(stressWidth->value());} selected
          tooltip {Render stresses for every "Step" element.} xywh {169 19 23 57} box FLAT_BOX labelsize 10 labelcolor 7 align 1 minimum 1 maximum 10 step 1 value 2
        }
      }
      Fl_Box {} {
        xywh {0 135 273 3} box FLAT_BOX color 7
      }
    }
    code {m_paintView = NULL;} {}
  }
  Function {show()} {open
  } {
    code {CPlatformInfoPtr platformInfo = CPlatformInfo::getInstance();

mainWindow->show();


\#ifdef WIN32
   if (platformInfo->isVista())
   {
   	//SetWindowLong(fl_xid(mainWindow), GWL_EXSTYLE, GetWindowLong(fl_xid(mainWindow), GWL_EXSTYLE) | WS_EX_LAYERED);
	//SetLayeredWindowAttributes(fl_xid(mainWindow), 0, (255 * 70) / 100, LWA_ALPHA);
   }	   
\#endif} {}
  }
  Function {setView(void* view)} {open
  } {
    code {m_paintView = view;} {}
  }
  Function {centerWindow(Fl_Window* window)} {open
  } {
    code {mainWindow->position(window->x()+window->w()/2-mainWindow->w()/2, window->y()+window->h()/2-mainWindow->h()/2);} {}
  }
  Function {placeWindow(Fl_Window* window)} {open
  } {
    code {mainWindow->position(window->x()+window->w()-mainWindow->w()-100, window->y()+window->h()-mainWindow->h()-100);} {}
  }
  Function {hide()} {open
  } {
    code {mainWindow->hide();} {}
  }
} 
