// generated by Fast Light User Interface Designer (fluid) version 1.0104

#ifndef MainFrame_h
#define MainFrame_h
#include <FL/Fl.H>
/** Main window class generated from FLTK. */
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Scroll.H>
#include "Fl_HoverButton.h"
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Roller.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Round_Button.H>
#include "PaintView.h"

class CMainFrame {
public:
  CMainFrame();
  Fl_Double_Window *wndMain;
  Fl_Box *boxWorkspace;
  Fl_Scroll *scrLeftToolbar;
  Fl_HoverButton *btnBrush;
private:
  inline void cb_btnBrush_i(Fl_HoverButton*, void*);
  static void cb_btnBrush(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnFloodFill;
private:
  inline void cb_btnFloodFill_i(Fl_HoverButton*, void*);
  static void cb_btnFloodFill(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnErase;
private:
  inline void cb_btnErase_i(Fl_HoverButton*, void*);
  static void cb_btnErase(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnForce;
private:
  inline void cb_btnForce_i(Fl_HoverButton*, void*);
  static void cb_btnForce(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnConstraint;
private:
  inline void cb_btnConstraint_i(Fl_HoverButton*, void*);
  static void cb_btnConstraint(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnEraseFem;
private:
  inline void cb_btnEraseFem_i(Fl_HoverButton*, void*);
  static void cb_btnEraseFem(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnBrushExtra;
private:
  inline void cb_btnBrushExtra_i(Fl_HoverButton*, void*);
  static void cb_btnBrushExtra(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnDrawingTools;
private:
  inline void cb_btnDrawingTools_i(Fl_HoverButton*, void*);
  static void cb_btnDrawingTools(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnDrawingExtra;
private:
  inline void cb_btnDrawingExtra_i(Fl_HoverButton*, void*);
  static void cb_btnDrawingExtra(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnCG;
private:
  inline void cb_btnCG_i(Fl_HoverButton*, void*);
  static void cb_btnCG(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnConstraint2;
private:
  inline void cb_btnConstraint2_i(Fl_HoverButton*, void*);
  static void cb_btnConstraint2(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnCalc;
private:
  inline void cb_btnCalc_i(Fl_HoverButton*, void*);
  static void cb_btnCalc(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnCalcSettings;
private:
  inline void cb_btnCalcSettings_i(Fl_HoverButton*, void*);
  static void cb_btnCalcSettings(Fl_HoverButton*, void*);
public:
  Fl_Group *grpBottomToolbar;
  Fl_Tabs *tabsProperties;
  Fl_Scroll *scrForces;
  Fl_Value_Output *lblPixelWeight;
  Fl_Value_Slider *sldRelativeForce;
private:
  inline void cb_sldRelativeForce_i(Fl_Value_Slider*, void*);
  static void cb_sldRelativeForce(Fl_Value_Slider*, void*);
public:
  Fl_Value_Output *lblExternalForce;
  Fl_Scroll *scrDisplacements;
  Fl_Slider *sldDisplacementScale;
private:
  inline void cb_sldDisplacementScale_i(Fl_Slider*, void*);
  static void cb_sldDisplacementScale(Fl_Slider*, void*);
public:
  Fl_Scroll *scrStress;
  Fl_Roller *rolStressAlpha;
private:
  inline void cb_rolStressAlpha_i(Fl_Roller*, void*);
  static void cb_rolStressAlpha(Fl_Roller*, void*);
public:
  Fl_Roller *rolStressSize;
private:
  inline void cb_rolStressSize_i(Fl_Roller*, void*);
  static void cb_rolStressSize(Fl_Roller*, void*);
public:
  Fl_Roller *rolLineWidth;
private:
  inline void cb_rolLineWidth_i(Fl_Roller*, void*);
  static void cb_rolLineWidth(Fl_Roller*, void*);
public:
  Fl_Button *btnClearResults;
private:
  inline void cb_btnClearResults_i(Fl_Button*, void*);
  static void cb_btnClearResults(Fl_Button*, void*);
public:
  Fl_Round_Button *btnStressAll;
private:
  inline void cb_btnStressAll_i(Fl_Round_Button*, void*);
  static void cb_btnStressAll(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *btnStressNegative;
private:
  inline void cb_btnStressNegative_i(Fl_Round_Button*, void*);
  static void cb_btnStressNegative(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *btnPositiveStress;
private:
  inline void cb_btnPositiveStress_i(Fl_Round_Button*, void*);
  static void cb_btnPositiveStress(Fl_Round_Button*, void*);
public:
  Fl_Roller *rolStressStep;
private:
  inline void cb_rolStressStep_i(Fl_Roller*, void*);
  static void cb_rolStressStep(Fl_Roller*, void*);
public:
  Fl_Slider *sldLowerStressTreshold;
private:
  inline void cb_sldLowerStressTreshold_i(Fl_Slider*, void*);
  static void cb_sldLowerStressTreshold(Fl_Slider*, void*);
public:
  Fl_Slider *sldUpperStressTreshold;
private:
  inline void cb_sldUpperStressTreshold_i(Fl_Slider*, void*);
  static void cb_sldUpperStressTreshold(Fl_Slider*, void*);
public:
  Fl_Roller *rolMeshIntensity;
private:
  inline void cb_rolMeshIntensity_i(Fl_Roller*, void*);
  static void cb_rolMeshIntensity(Fl_Roller*, void*);
public:
  Fl_Scroll *scrVersion;
  Fl_Group *grpVersion;
  Fl_Group *grpBuildTime;
  Fl_Group *grpBuildDate;
private:
  inline void cb_Log_i(Fl_Button*, void*);
  static void cb_Log(Fl_Button*, void*);
public:
  Fl_Button *btnAbout;
private:
  inline void cb_btnAbout_i(Fl_Button*, void*);
  static void cb_btnAbout(Fl_Button*, void*);
  inline void cb__i(Fl_HoverButton*, void*);
  static void cb_(Fl_HoverButton*, void*);
  inline void cb_1_i(Fl_HoverButton*, void*);
  static void cb_1(Fl_HoverButton*, void*);
  inline void cb_2_i(Fl_HoverButton*, void*);
  static void cb_2(Fl_HoverButton*, void*);
  inline void cb_3_i(Fl_HoverButton*, void*);
  static void cb_3(Fl_HoverButton*, void*);
  inline void cb_4_i(Fl_HoverButton*, void*);
  static void cb_4(Fl_HoverButton*, void*);
  inline void cb_5_i(Fl_HoverButton*, void*);
  static void cb_5(Fl_HoverButton*, void*);
  inline void cb_6_i(Fl_HoverButton*, void*);
  static void cb_6(Fl_HoverButton*, void*);
  inline void cb_7_i(Fl_HoverButton*, void*);
  static void cb_7(Fl_HoverButton*, void*);
  inline void cb_8_i(Fl_HoverButton*, void*);
  static void cb_8(Fl_HoverButton*, void*);
  inline void cb_9_i(Fl_HoverButton*, void*);
  static void cb_9(Fl_HoverButton*, void*);
  inline void cb_a_i(Fl_HoverButton*, void*);
  static void cb_a(Fl_HoverButton*, void*);
  inline void cb_b_i(Fl_HoverButton*, void*);
  static void cb_b(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnStiffness;
private:
  inline void cb_btnStiffness_i(Fl_HoverButton*, void*);
  static void cb_btnStiffness(Fl_HoverButton*, void*);
public:
  Fl_Scroll *scrRightToolbar;
  Fl_HoverButton *btnNew;
private:
  inline void cb_btnNew_i(Fl_HoverButton*, void*);
  static void cb_btnNew(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnOpen;
private:
  inline void cb_btnOpen_i(Fl_HoverButton*, void*);
  static void cb_btnOpen(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnSave;
private:
  inline void cb_btnSave_i(Fl_HoverButton*, void*);
  static void cb_btnSave(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnOpenImage;
private:
  inline void cb_btnOpenImage_i(Fl_HoverButton*, void*);
  static void cb_btnOpenImage(Fl_HoverButton*, void*);
public:
  Fl_Box *bvl3;
  Fl_HoverButton *btnUndo;
private:
  inline void cb_btnUndo_i(Fl_HoverButton*, void*);
  static void cb_btnUndo(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnSelect;
private:
  inline void cb_btnSelect_i(Fl_HoverButton*, void*);
  static void cb_btnSelect(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnCut;
private:
  inline void cb_btnCut_i(Fl_HoverButton*, void*);
  static void cb_btnCut(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnCopy;
private:
  inline void cb_btnCopy_i(Fl_HoverButton*, void*);
  static void cb_btnCopy(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnPaste;
private:
  inline void cb_btnPaste_i(Fl_HoverButton*, void*);
  static void cb_btnPaste(Fl_HoverButton*, void*);
public:
  Fl_Box *bvl6;
  Fl_HoverButton *btnPasteWin;
private:
  inline void cb_btnPasteWin_i(Fl_HoverButton*, void*);
  static void cb_btnPasteWin(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnImportProps;
private:
  inline void cb_btnImportProps_i(Fl_HoverButton*, void*);
  static void cb_btnImportProps(Fl_HoverButton*, void*);
public:
  CPaintView *paintView;
  ~CMainFrame();
  void show();
  void close();
private:
  void resetButtons();
public:
  void resetButtons(Fl_HoverButton* self);
  void setPixelWeight(double weight);
  void setExternalForce(double force);
};
#endif
